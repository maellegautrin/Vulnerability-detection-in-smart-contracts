import numpy as np
import pandas as pd
import os
import tensorflow as tf
from sklearn.model_selection import train_test_split


# Charger les données à partir du fichier CSV
def read_csv_files_to_list(input_folder):
    if not os.path.isdir(input_folder):
        print(f"Error: Folder '{input_folder}' not found.")
        return None
    X,y = [],[]
    for file in os.listdir(input_folder):
        if file.endswith(".csv"):
            csv_file = os.path.join(input_folder, file)
            df = pd.read_csv(csv_file)
            X.append(df)

    return X,y

def train_model(X,y):
    # Définition du modèle
    model = tf.keras.Sequential([
        tf.keras.layers.Input(shape=(X.shape[1],)),  # Input layer
        tf.keras.layers.Dense(128, activation='relu'),  # Hidden layer avec 128 neurones et fonction d'activation ReLU
        tf.keras.layers.Dense(64, activation='relu'),   # Hidden layer avec 64 neurones et fonction d'activation ReLU
        tf.keras.layers.Dense(1, activation='sigmoid')  # Output layer avec 1 neurone et fonction d'activation sigmoïde pour la classification binaire
    ])

    # Compilation du modèle
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

    # Entraînement du modèle
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)  # Séparation des données en ensembles d'entraînement et de test
    model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)  # Entraînement du modèle avec validation croisée

    # Évaluation du modèle
    loss, accuracy = model.evaluate(X_test, y_test)  # Évaluation du modèle sur les données de test
    print("Accuracy:", accuracy)
    return model

def prediction(model):
    # Prédiction
    # Nouvelles données à prédire
    new_graphs = [...]  # nouvelles données
    predictions = model.predict(new_graphs)  # Prédiction sur de nouveaux graphes
    print("Predictions:", predictions)

if __name__ == "__main__":
    print(1)
    input_folder = "dataset_vector/"
    X,y = read_csv_files_to_list(input_folder)
    model = train_model(X.y)
    