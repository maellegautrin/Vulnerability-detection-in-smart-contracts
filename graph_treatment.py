import pydot
import sys
import matplotlib.pyplot as plt
import networkx as nx
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer
import json
import os


def process_dot_file(dot_file):
    with open(dot_file, 'r') as dot_file:
        dot_data = dot_file.read()
    graphs = pydot.graph_from_dot_data(dot_data)
    graph = graphs[0]
    return(graph)

def pydot_to_nx(pydotgraph):
    nx_graph = nx.DiGraph()
    for node in pydotgraph.get_nodes():
        node_name = node.get_name()
        if node_name != 'node':
            node_label = node.get_label()
            nx_graph.add_node(node_name, label=node_label)

    for edge in pydotgraph.get_edges():
        source = edge.get_source()
        destination = edge.get_destination()
        nx_graph.add_edge(source, destination)
    return(nx_graph)

def attention_matrix(graph):
    # Obtenir les embeddings de phrases
    attention_matrix = {}
    # vectorizer = CountVectorizer().fit( [graph._node[node]['label'] for node in graph.nodes])
    for node1 in nx_graph.nodes():
        attention_matrix[node1]= {}
        for node2 in nx_graph.nodes():
            vectorizer = CountVectorizer().fit([graph._node[node1]['label'],graph._node[node2]['label']])
            label1_vec = vectorizer.transform([graph._node[node1]['label']])
            label2_vec = vectorizer.transform([graph._node[node2]['label']])
            similarity_score = cosine_similarity(label1_vec, label2_vec)[0][0]
            if similarity_score < 0.17 :
                attention_matrix[node1][node2] = 0
            else :
                attention_matrix[node1][node2] = similarity_score
    return(attention_matrix)


def distinct_path(graph, x, y):
    all_paths = []
    def find_paths(current_path, current_node):
        if current_node == y:
            all_paths.append(current_path.copy())
        else:
            for neighbor in graph.neighbors(current_node):
                if neighbor not in current_path:
                    current_path.append(neighbor)
                    find_paths(current_path, neighbor)
                    current_path.pop()

    find_paths([x], x)
    return all_paths


def subgraph_construction(nx_graph,attention_matrix):
    def add_edges_subgraph(x, y, attention_score):
        all_paths = distinct_path(nx_graph,x, y)
        valid_path = True
        for path in all_paths:
            for node in path[1:-1]:
                if node in subgraph.nodes():
                    valid_path = False
                    break
            if valid_path:
                subgraph.add_edge(x, y, weight=attention_score)
                break

    set_subgraph = set([])
    for node1 in nx_graph.nodes():
        subgraph = nx.DiGraph()
        for node2 in nx_graph.nodes():
            attention_score = attention_matrix[node1][node2]
            if attention_score > 0 :
                subgraph.add_node(node2, label=nx_graph._node[node2]['label'])
        for x in subgraph.nodes():
            for y in subgraph.nodes():
                if x !=y :
                    add_edges_subgraph(x,y, attention_matrix[x][y])
        set_subgraph.add(subgraph)
    return(set_subgraph)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python script.py <input_dot_file>")
        sys.exit(1)
    input_dot_file = sys.argv[1]
    inputrdot = input_dot_file.rstrip(".dot")
    inputrfold = inputrdot[16:]
    pydotgraph = process_dot_file(input_dot_file)
    nx_graph = pydot_to_nx(pydotgraph)
    attention_matrix = attention_matrix(nx_graph)
    subgraphs = subgraph_construction(nx_graph, attention_matrix)
    i=0
    for subgraph in subgraphs:
        i+=1
        # nx.draw(subgraph, with_labels=True)
        # plt.show()
        """ edge_list = [[int(u), int(v), data['weight']] for u, v, data in subgraph.edges(data=True)]
        node_labels = nx.get_node_attributes(subgraph, 'label')
        graph_data = {"edges": edge_list, "features": node_labels}"""
        output_folder = "./subgraphs/" + inputrfold
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)
        """ output_file = "./subgraphs/"+inputrfold+"/subgraph"+str(i)+".json"
        print(output_file) """
        nx.write_gexf(subgraph, "./subgraphs/"+inputrfold+"/subgraph"+str(i)+".gexf")


