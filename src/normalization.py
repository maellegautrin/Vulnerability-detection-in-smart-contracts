import json
import re
import os
import sys 

def keep_opcodes_only(graph_file, output_folder):
    with open(graph_file, 'r') as f:
        graph_data = json.load(f)

    features = graph_data.get("features", {})
    edges = graph_data.get("edges")
    new_features = {}
    for node_id in features:
        new_features[node_id] = extract_opcodes(features[node_id])
    json_data = {"edges": edges, "features": new_features}
    with open(os.path.join(output_folder,file), "w") as output_file:
        json.dump(json_data, output_file, indent=2)

def extract_opcodes(input_string):
    # Utilisation d'une expression régulière pour trouver tous les opcodes suivis éventuellement par un entier
    opcodes = re.findall(r'[A-Z]+\d*', input_string)
    # Concaténation des opcodes trouvés en une seule chaîne avec un espace entre chaque opcode
    opcodes_string = ' '.join(opcodes)
    return opcodes_string


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python list_files.py /chemin/vers/votre/dossier")
        sys.exit(1)

    # Récupérer le chemin du dossier à partir des arguments

    input_folder = sys.argv[1]

    output_folder = "dataset_cfg_json_normalize"
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
    j = 0
    for file in os.listdir(input_folder):
        print(j, file)
        if not os.path.exists(os.path.join(output_folder, file)):
            keep_opcodes_only(os.path.join(input_folder, file), output_folder)
        j += 1