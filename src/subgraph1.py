import os
import networkx as nx
import json
import re

opcodes = ["ADD", "SUB", "MUL", "DIV", "SDIV", "MOD", "SMOD", "ADDMOD", "MULMOD", "AND", "OR", "XOR", "NOT", "BYTE", "SHL", "SHR", "SAR", "LT", "GT", "SLT", "SGT", "EQ", "ISZERO", "AND", "OR", "XOR", "NOT", "BYTE", "MLOAD", "MSTORE", "MSTORE8", "SLOAD", "SSTORE", "STOP", "JUMP", "JUMPI", "PC", "MSIZE", "GAS", "JUMPDEST", "CALL", "CALLCODE", "RETURN", "DELEGATECALL", "STATICCALL", "CREATE", "CREATE2", "SELFDESTRUCT", "SLOAD", "SSTORE", "PUSH1", "PUSH2", "PUSH3", "PUSH4", "PUSH5", "PUSH6", "PUSH7", "PUSH8", "PUSH9", "PUSH10", "PUSH11", "PUSH12", "PUSH13", "PUSH14", "PUSH15", "PUSH16", "PUSH17", "PUSH18", "PUSH19", "PUSH20", "PUSH21", "PUSH22", "PUSH23", "PUSH24", "PUSH25", "PUSH26", "PUSH27", "PUSH28", "PUSH29", "PUSH30", "PUSH31", "PUSH32", "POP", "DUP1", "DUP3", "DUP4", "DUP5", "DUP6", "DUP7", "DUP8", "DUP9", "DUP10", "DUP11", "DUP12", "DUP13", "DUP14", "DUP15", "DUP16", "SWAP1", "SWAP2", "SWAP3", "SWAP4", "SWAP5", "SWAP6", "SWAP7", "SWAP8", "SWAP9", "SWAP10", "SWAP11", "SWAP12", "SWAP13", "SWAP14", "SWAP15", "SWAP16", "LOG0", "LOG1", "LOG2", "LOG3", "LOG4", "EXP", "CALLDATALOAD", "CALLDATASIZE", "CALLDATACOPY", "CODESIZE", "CODECOPY", "EXTCODESIZE", "EXTCODECOPY", "STOP", "RETURN", "REVERT", "INVALID", "SELFDESTRUCT"]
usefull_reentrancy = {
    "MSTORE": None,
    "MLOAD": None,
    "SLOAD": None,
    "SSTORE": None,
    "CALL": None,
    "CALLCODE": None,
    "DELEGATECALL": None,
    "STATICCALL": None,
    "CREATE": None,
    "CREATE2": None,
    "SELFDESTRUCT": None,
    "CALLER": None,
    "CALLVALUE": None,
    "CALLDATALOAD": None,
    "CALLDATASIZE": None,
    "CALLDATACOPY": None,
    "CODESIZE": None,
    "CODECOPY": None,
    "RETURNDATASIZE": None,
    "RETURNDATACOPY": None
}

def reentrancy_subgraph(graph_file, output_folder):
    with open(graph_file, 'r') as f:
        graph_data = json.load(f)

    features = graph_data.get("features", {})
    edges = graph_data.get("edges")
    new_features = {}
    input_file_name = os.path.splitext(file)[0]
    for node_id in features:
        new_features[node_id] = extract_opcodes_reentrancy(features[node_id])
    json_data = {"edges": edges, "features": new_features}
    with open(os.path.join(output_folder,input_file_name+"_reentrance.json"), "w") as output_file:
        json.dump(json_data, output_file, indent=2)

def extract_opcodes_reentrancy(input_string):
    opcodes = re.findall(r'[A-Z]+\d*', input_string)
    filtered_opcodes = [opcode for opcode in opcodes if opcode in usefull_reentrancy]
    opcodes_string = ' '.join(filtered_opcodes)
    return opcodes_string


if __name__ == "__main__":
    input_folder = "dataset_cfg_json_normalize"
    output_folder = "subgraphs"
    j = 0
    for file in os.listdir(input_folder):
        print(j, file)
        input_file_name = os.path.splitext(file)[0]
        if not os.path.exists(os.path.join(output_folder, input_file_name+"_reentrance.json")):
            reentrancy_subgraph(os.path.join(input_folder, file), output_folder)
        j += 1
